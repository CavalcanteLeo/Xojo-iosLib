#tag Class
 Attributes ( incomplete = "needs NSDate" ) Protected Class AppleAVPlayer
Inherits AppleObject
	#tag ExternalMethod, Flags = &h21
		Private Declare Function addBoundaryTimeObserverForTimes Lib AVFoundationLibname Selector "addBoundaryTimeObserverForTimes:queue:usingBlock:" (id as ptr, times as ptr, queue as ptr, Block as ptr) As Ptr
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Function addPeriodicTimeObserverForInterval Lib AVFoundationLibname Selector "addPeriodicTimeObserverForInterval:queue:usingBlock:" (id as ptr, interval as CMTime, queue as ptr, Block as ptr) As Ptr
	#tag EndExternalMethod

	#tag Method, Flags = &h0
		Function AddTimeObserver(times as applearray, block as AppleBlock, queue as ptr = nil) As Ptr
		  return addBoundaryTimeObserverForTimes (id, times.id, queue, block.Handle)
		  
		  // use the return value for removeTimeObserver!
		  // The necessary Observer method for this observer takes no input parameters and returns nothing.
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function AddTimeObserver(Interval as cmtime, block as AppleBlock, queue as ptr = nil) As Ptr
		  return addPeriodicTimeObserverForInterval (id, Interval, queue, block.Handle)
		  
		  // use the return value for removeTimeObserver!
		  // see TimeObserverTemplate for the structure of the block method
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub CancelPrerolls()
		  Declare sub cancelPendingPrerolls lib AVFoundationLibName selector "cancelPendingPrerolls" (id as ptr)
		  cancelPendingPrerolls (id)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1000
		Sub Constructor(PlayerItem As AppleAVPlayerItem)
		  // Calling the overridden superclass constructor.
		  // Note that this may need modifications if there are multiple constructor choices.
		  // Possible constructor calls:
		  // Constructor() -- From AppleObject
		  // Constructor(AnId as Ptr) -- From AppleObject
		  Super.Constructor (initWithPlayerItem(alloc(Classptr), PlayerItem.id))
		  mhasownership = true
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1000
		Sub Constructor(aURL as AppleURL)
		  Declare function initWithURL lib AVFoundationLibName selector "initWithURL:" (id as ptr, url as ptr) as ptr
		  // Calling the overridden superclass constructor.
		  // Note that this may need modifications if there are multiple constructor choices.
		  // Possible constructor calls:
		  // Constructor() -- From AppleObject
		  // Constructor(AnId as Ptr) -- From AppleObject
		  Super.Constructor (initWithURL(alloc(Classptr), aURL.id))
		  mhasownership = true
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1000
		Sub Constructor(URLName as CFStringRef)
		  dim myURL as new AppleURL (URLName)
		  Constructor (myurl)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1000
		Sub Constructor(aURL as FolderItem)
		  Constructor (new AppleURL(aurl))
		End Sub
	#tag EndMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Function getappliesMediaSelectionCriteriaAutomatically Lib AVFoundationLibname Selector "appliesMediaSelectionCriteriaAutomatically" (id as ptr) As Boolean
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Function getmasterClock Lib AVFoundationLibname Selector "masterClock" (id as ptr) As Ptr
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Function getmediaSelectionCriteriaForMediaCharacteristic Lib AVFoundationLibname Selector "mediaSelectionCriteriaForMediaCharacteristic" (id as ptr, characteristic as CFStringRef) As CFStringRef
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Function initWithPlayerItem Lib AVFoundationLibname Selector "initWithPlayerItem:" (id as ptr, playerItem As Ptr) As Ptr
	#tag EndExternalMethod

	#tag Method, Flags = &h0
		 Shared Function MakefromPtr(aPtr as Ptr) As AppleAVPlayer
		  return if (aptr = nil, nil, new AppleAVPlayer(aptr))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function MediaSeelctionCriteria(characteristic as cfstringref) As text
		  return getmediaSelectionCriteriaForMediaCharacteristic (id, characteristic)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub MediaSeelctionCriteria(characteristic as cfstringref, value as text)
		  setmediaSelectionCriteriaForMediaCharacteristic (id, characteristic, value)
		End Sub
	#tag EndMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Function outputObscuredDueToInsufficientExternalProtection Lib AVFoundationLibname Selector "outputObscuredDueToInsufficientExternalProtection" (id as ptr) As Boolean
	#tag EndExternalMethod

	#tag Method, Flags = &h0
		Sub Pause()
		  Declare sub pause lib AVFoundationLibName selector "pause" (id as ptr)
		  pause (id)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Play()
		  Declare sub play lib AVFoundationLibName selector "play" (id as ptr)
		  play (id)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub PreRoll(Rate As Single, Completionblock as AppleBlock = nil)
		  Declare sub prerollAtRate lib AVFoundationLibName selector "prerollAtRate:completionHandler:" (id as ptr, rate as single, Block as ptr)
		  if Completionblock = nil then 
		    Completionblock = new AppleBlock  (AddressOf PrerollCompletionBlock)
		  end if
		  prerollAtRate id, rate,Completionblock.Handle
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub PrerollCompletionBlock(Successfull as Boolean)
		  if me <> nil then RaiseEvent PrerollFinished (Successfull)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub RemoveTimeObserver(ObserverPtr as Ptr)
		  removeTimeObserver (id, ObserverPtr)
		End Sub
	#tag EndMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Sub removeTimeObserver Lib AVFoundationLibname Selector "removeTimeObserver:" (id as ptr, observer as ptr)
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Sub replaceCurrentItemWithPlayerItem Lib AVFoundationLibname Selector "replaceCurrentItemWithPlayerItem:" (id as ptr, playerItem As Ptr)
	#tag EndExternalMethod

	#tag Method, Flags = &h0
		Sub ReplaceItem(PlayerItem As AppleAVPlayerItem)
		  replaceCurrentItemWithPlayerItem (id, PlayerItem.id)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SeekToTime(Time as CMTime)
		  dim block as new AppleBlock (AddressOf SeekToTimeCompletionBlock)
		  AVFoundationFramework.seekToTime id, time, block.Handle
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SeekToTime(Time as CMTime, ToleranceBefore As CMTime, ToleranceAfter as CMTime)
		  dim block as new AppleBlock (AddressOf SeekToTimeCompletionBlock)
		  AVFoundationFramework.seekToTimeTolerance id, time, ToleranceBefore, ToleranceAfter, block.Handle
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub SeekToTimeCompletionBlock(Finished as Boolean)
		  if me <> nil then RaiseEvent TimeFound (Finished)
		End Sub
	#tag EndMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Sub setappliesMediaSelectionCriteriaAutomatically Lib AVFoundationLibname Selector "setAppliesMediaSelectionCriteriaAutomatically:" (id as ptr, value as Boolean)
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Sub setmasterClock Lib AVFoundationLibname Selector "setMasterClock:" (id as ptr, clock as ptr)
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Sub setmediaSelectionCriteriaForMediaCharacteristic Lib AVFoundationLibname Selector "setMediaSelectionCriteria:forMediaCharacteristic:" (id as ptr, characteristic as cfstringref, value as cfstringref)
	#tag EndExternalMethod

	#tag Method, Flags = &h0
		Sub SetRate(rate as single, itemTime as CMTime, HostClockTime as CMTime)
		  setRatetime (id, rate, itemTime, HostClockTime)
		End Sub
	#tag EndMethod

	#tag ExternalMethod, Flags = &h21
		Private Declare Sub setRateTime Lib AVFoundationLibname Selector "setRate:time:atHostTime:" (id as ptr, rate As single, itemTime as CMTime, HostClockTime as CMTime)
	#tag EndExternalMethod

	#tag Method, Flags = &h0
		Sub Synchronize(Rate as single, itemTime as CMTime, Hosttime as CMTime)
		  Declare sub setRate lib AVFoundationLibName selector "setRate:time:atHostTime:" (id as ptr, rate as single, itemTime as CMTime, Hosttime as CMTime)
		  setRate id, rate, itemTime, Hosttime
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub TimeObserverTemplate(Time as CMTIme)
		  // This is a template for addTimeObserver
		  // uncomment the following:
		  
		  #pragma unused time
		End Sub
	#tag EndMethod


	#tag Hook, Flags = &h0
		Event PrerollFinished(Succesful as Boolean)
	#tag EndHook

	#tag Hook, Flags = &h0
		Event TimeFound(Finished as Boolean)
	#tag EndHook


	#tag Note, Name = Status
		
		seektoDate missing, no NSDate class yet
		Enumeration MediaCharateristics needs a conversion ti its text constant in order to be useful
	#tag EndNote


	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function actionAtItemEnd lib AVFoundationLibName selector "actionAtItemEnd" (id as ptr) as AVPlayerActionAtItemEnd
			  return actionAtItemEnd (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setActionAtItemEnd lib AVFoundationLibName selector "setActionAtItemEnd:" (id as ptr, value as AVPlayerActionAtItemEnd)
			  setActionAtItemEnd id, value
			End Set
		#tag EndSetter
		actionAtItemEnd As AVPlayerActionAtItemEnd
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function allowsExternalPlayback lib AVFoundationLibName selector "allowsExternalPlayback" (id as ptr) as Boolean
			  return allowsExternalPlayback (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setAllowsExternalPlayback lib AVFoundationLibName selector "setAllowsExternalPlayback:" (id as ptr, value as Boolean)
			  setAllowsExternalPlayback id, value
			End Set
		#tag EndSetter
		AllowsExternalPlayback As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  return getappliesMediaSelectionCriteriaAutomatically (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  setAppliesMediaSelectionCriteriaAutomatically id, value
			End Set
		#tag EndSetter
		AutomaticMediaSelection As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h1
		#tag Getter
			Get
			  static mClassPtr as Ptr = FoundationFramework.NSClassFromString ("AVPlayer")
			  return mClassPtr
			End Get
		#tag EndGetter
		Protected Shared ClassPtr As Ptr
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function isClosedCaptionDisplayEnabled lib AVFoundationLibName selector "isClosedCaptionDisplayEnabled" (id as ptr) as Boolean
			  return isClosedCaptionDisplayEnabled (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setClosedCaptionDisplayEnabled lib AVFoundationLibName selector "setClosedCaptionDisplayEnabled:" (id as ptr, value as Boolean)
			  setClosedCaptionDisplayEnabled id, value
			End Set
		#tag EndSetter
		ClosedCaption As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function currentItem lib AVFoundationLibName selector "currentItem" (id as ptr) as Ptr
			  return AppleAVPlayerItem.makefromPtr (currentItem (id))
			End Get
		#tag EndGetter
		currentItem As AppleAVPlayerItem
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  return AVFoundationFramework.getcurrentTime (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  AVFoundationFramework.setCurrentTime id, value
			End Set
		#tag EndSetter
		currentTime As CMTime
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  return AppleError.MakefromPtr (AVFoundationFramework.geterror(id))
			End Get
		#tag EndGetter
		Error As AppleError
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function isExternalPlaybackActive lib AVFoundationLibName selector "isExternalPlaybackActive" (id as ptr) as Boolean
			  return isExternalPlaybackActive (id)
			End Get
		#tag EndGetter
		ExternalPlaybackActive As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  select case ExternalPlaybackVideoGravityText
			  case AVLayerVideoGravityResize
			    return AVLayerGravity.Fill
			  case AVLayerVideoGravityResizeAspect
			    return AVLayerGravity.FitProportional
			  case AVLayerVideoGravityResizeAspectFill
			    return AVLayerGravity.FillProportional
			  end select
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  dim myvalue as text
			  select case value
			  case AVLayerGravity.Fill
			    myvalue = AVLayerVideoGravityResize
			  case AVLayerGravity.FitProportional
			    myvalue= AVLayerVideoGravityResizeAspect
			  case AVLayerGravity.FillProportional
			    myvalue = AVLayerVideoGravityResizeAspectFill
			  end select
			  ExternalPlaybackVideoGravityText = myvalue
			End Set
		#tag EndSetter
		ExternalPlaybackVideoGravity As AVLayerGravity
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h1
		#tag Getter
			Get
			  Declare function externalPlaybackVideoGravity lib AVFoundationLibName selector "externalPlaybackVideoGravity" (id as ptr) as CFStringRef
			  return externalPlaybackVideoGravity (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setExternalPlaybackVideoGravity lib AVFoundationLibName selector "setExternalPlaybackVideoGravity:" (id as ptr, value as CFStringRef)
			  setExternalPlaybackVideoGravity id, value
			End Set
		#tag EndSetter
		Protected ExternalPlaybackVideoGravityText As text
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function usesExternalPlaybackWhileExternalScreenIsActive lib AVFoundationLibName selector "usesExternalPlaybackWhileExternalScreenIsActive" (id as ptr) as Boolean
			  return usesExternalPlaybackWhileExternalScreenIsActive (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setUsesExternalPlaybackWhileExternalScreenIsActive lib AVFoundationLibName selector "setUsesExternalPlaybackWhileExternalScreenIsActive:" (id as ptr, value as Boolean)
			  setUsesExternalPlaybackWhileExternalScreenIsActive id, value
			End Set
		#tag EndSetter
		ExternalPlaybackWhileExternalScreenActive As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Note
			// Here should follow a CMClockRef class!
		#tag EndNote
		#tag Getter
			Get
			  return getmasterClock (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  setmasterClock (id, value)
			End Set
		#tag EndSetter
		MasterClock As Ptr
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function isMuted lib AVFoundationLibName selector "isMuted" (id as ptr) as Boolean
			  return isMuted (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setMuted lib AVFoundationLibName selector "setMuted:" (id as ptr, value as Boolean)
			  setMuted id, value
			End Set
		#tag EndSetter
		Muted As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  return outputObscuredDueToInsufficientExternalProtection (id)
			End Get
		#tag EndGetter
		OutputObscured As Boolean
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function rate lib AVFoundationLibName selector "rate" (id as ptr) as Single
			  return rate (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setRate lib AVFoundationLibName selector "setRate:" (id as ptr, value as Single)
			  setRate id, value
			End Set
		#tag EndSetter
		Rate As Single
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function status lib AVFoundationLibName selector "status" (id as ptr) as AVPlayerStatus
			  return status (id)
			End Get
		#tag EndGetter
		Status As AVPlayerStatus
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Declare function volume lib AVFoundationLibName selector "volume" (id as ptr) as Single
			  return volume (id)
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Declare Sub setVolume lib AVFoundationLibName selector "setVolume:" (id as ptr, value as Single)
			  setVolume id, value
			End Set
		#tag EndSetter
		Volume As Single
	#tag EndComputedProperty


	#tag Constant, Name = AVMediaCharacteristicAudible, Type = Text, Dynamic = False, Default = \"AVMediaCharacteristicAudible", Scope = Private
	#tag EndConstant

	#tag Constant, Name = AVMediaCharacteristicFrameBased, Type = Text, Dynamic = False, Default = \"AVMediaCharacteristicFrameBased", Scope = Private
	#tag EndConstant

	#tag Constant, Name = AVMediaCharacteristicLegible, Type = Text, Dynamic = False, Default = \"AVMediaCharacteristicLegible", Scope = Private
	#tag EndConstant

	#tag Constant, Name = AVMediaCharacteristicVisual, Type = Text, Dynamic = False, Default = \"AVMediaCharacteristicVisual", Scope = Private
	#tag EndConstant


	#tag Enum, Name = AVPlayerActionAtItemEnd, Type = Integer, Flags = &h0
		Advance
		  Pause
		None
	#tag EndEnum

	#tag Enum, Name = AVPlayerStatus, Type = Integer, Flags = &h0
		Unknown
		  ReadyToPlay
		Failed
	#tag EndEnum

	#tag Enum, Name = MediaCharacteristics, Type = Integer, Flags = &h0
		Visual
		  Audible
		  Legible
		FrameBased
	#tag EndEnum


	#tag ViewBehavior
		#tag ViewProperty
			Name="actionAtItemEnd"
			Group="Behavior"
			Type="AVPlayerActionAtItemEnd"
			EditorType="Enum"
			#tag EnumValues
				"0 - Advance"
				"1 - Pause"
				"2 - None"
			#tag EndEnumValues
		#tag EndViewProperty
		#tag ViewProperty
			Name="AllowsExternalPlayback"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AutomaticMediaSelection"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ClosedCaption"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ExternalPlaybackActive"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ExternalPlaybackWhileExternalScreenActive"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Muted"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="OutputObscured"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Rate"
			Group="Behavior"
			Type="Single"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Status"
			Group="Behavior"
			Type="AVPlayerStatus"
			EditorType="Enum"
			#tag EnumValues
				"0 - Unknown"
				"1 - ReadyToPlay"
				"2 - Failed"
			#tag EndEnumValues
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Volume"
			Group="Behavior"
			Type="Single"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
