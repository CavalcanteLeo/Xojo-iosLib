<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2015r3" FormatVersion="2" MinIDEVersion="20140300">
<block type="Module" ID="1895190527">
 <ObjName>AppleCALayer</ObjName>
 <ObjContainerID>803434495</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>AppleCAMediaTimingObject</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>AddAnimation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddAnimation(animation as AppleCAAnimation, key as CFStringRef = "")</SourceLine>
   <SourceLine>declare sub addAnimation lib QuartzCore selector "addAnimation:forKey:" (id as ptr, animation as ptr, key as CFStringref)</SourceLine>
   <SourceLine>addAnimation id, animation.Id, key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>animation as AppleCAAnimation, key as CFStringRef = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AddSubLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddSubLayer(ALAyer as AppleCALayer)</SourceLine>
   <SourceLine>declare sub addSublayer lib QuartzCore selector "addSublayer:" (id as ptr, aLayer as ptr)</SourceLine>
   <SourceLine>addSublayer id, ALAyer.id</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ALAyer as AppleCALayer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Animation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Animation(key as CFStringRef) As AppleCAAnimation</SourceLine>
   <SourceLine>declare Function animationForKey lib QuartzCore selector "animationForKey:" (id as ptr, key as CFStringref) as Ptr</SourceLine>
   <SourceLine>return AppleCAAnimation.MakeFromPtr (animationForKey (id, key))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key as CFStringRef</ItemParams>
  <ItemResult>AppleCAAnimation</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>Super.Constructor (Init(Alloc(ClassPtr)))</SourceLine>
   <SourceLine>mHasOwnership = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(aLayer As AppleCALayer)</SourceLine>
   <SourceLine>Declare Function initWithLayer lib QuartzCore selector "initWithLayer:" (id as ptr, aLayer as ptr) as Ptr</SourceLine>
   <SourceLine>Super.Constructor (initWithLayer (alloc(ClassPtr), aLayer.Id))</SourceLine>
   <SourceLine>mHasOwnership = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aLayer As AppleCALayer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ConvertPointFromLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConvertPointFromLayer(aPoint as NSPoint, aLayer as AppleCALayer) As NSPoint</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare Function convertPointfromLayer lib QuartzCore selector "convertPoint:fromLayer:" (id as ptr, aPoint as NSPoint, aview as ptr) as NSPoint</SourceLine>
   <SourceLine>return convertPointfromLayer (id, apoint, alayer.id)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare Function convertPointfromLayer lib QuartzCore selector "convertPoint:fromLayer:" (id as ptr, aPoint as NSPoint32Bit, aview as ptr) as NSPoint32Bit</SourceLine>
   <SourceLine>return convertPointfromLayer (id, apoint.toNSPoint32, alayer.id).tonspoint</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aPoint as NSPoint, aLayer as AppleCALayer</ItemParams>
  <ItemResult>NSPoint</ItemResult>
 </Method>
 <Method>
  <ItemName>ConvertPointToLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConvertPointToLayer(aPoint as NSPoint, aLayer as AppleCALayer) As NSPoint</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare Function convertPointtoLayer lib QuartzCore selector "convertPoint:toLayer:" (id as ptr, aPoint as NSPoint, aview as ptr) as NSPoint</SourceLine>
   <SourceLine>return convertPointtoLayer (id, apoint, alayer.id)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare Function convertPointtoLayer lib QuartzCore selector "convertPoint:toLayer:" (id as ptr, aPoint as NSPoint32Bit, aview as ptr) as NSPoint32Bit</SourceLine>
   <SourceLine>return convertPointtoLayer (id, apoint.toNSPoint32, alayer.id).tonspoint</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aPoint as NSPoint, aLayer as AppleCALayer</ItemParams>
  <ItemResult>NSPoint</ItemResult>
 </Method>
 <Method>
  <ItemName>ConvertRectFromLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConvertRectFromLayer(aRect as NSRect, aLayer as AppleCALayer) As NSRect</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare Function ConvertRectFromLayer lib QuartzCore selector "convertRect:fromLayer:" (id as ptr, aRect as NSRect, aview as ptr) as nsrect</SourceLine>
   <SourceLine>return ConvertRectFromLayer (id, arect, alayer.id)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare Function ConvertRectFromLayer lib QuartzCore selector "convertRect:fromLayer:" (id as ptr, aRect as NSRect32Bit, aview as ptr) as NSRect32Bit</SourceLine>
   <SourceLine>return ConvertRectFromLayer (id, arect.toNSRect32, alayer.id).tonsrect</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aRect as NSRect, aLayer as AppleCALayer</ItemParams>
  <ItemResult>NSRect</ItemResult>
 </Method>
 <Method>
  <ItemName>ConvertRectToLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConvertRectToLayer(aRect as NSRect, aLayer as AppleCALayer) As NSRect</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare Function ConvertRectToLayer lib QuartzCore selector "convertRect:toLayer:" (id as ptr, aRect as NSRect, aview as ptr) as nsrect</SourceLine>
   <SourceLine>return ConvertRectToLayer (id, arect, alayer.id)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare Function ConvertRectToLayer lib QuartzCore selector "convertRect:toLayer:" (id as ptr, aRect as NSRect32Bit, aview as ptr) as NSRect32Bit</SourceLine>
   <SourceLine>return ConvertRectToLayer (id, arect.toNSRect32, alayer.id).tonsrect</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aRect as NSRect, aLayer as AppleCALayer</ItemParams>
  <ItemResult>NSRect</ItemResult>
 </Method>
 <Method>
  <ItemName>ConvertTimeFromLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConvertTimeFromLayer(aTime as Double, aLayer as AppleCALayer) As Double</SourceLine>
   <SourceLine>declare Function ConvertTimeFromLayer lib QuartzCore selector "convertTime:fromLayer:" (id as ptr, aTime as double, aLayer as ptr) as Double</SourceLine>
   <SourceLine>return ConvertTimeFromLayer (id, atime, if(aLayer = NIL, NIL, alayer.id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aTime as Double, aLayer as AppleCALayer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>ConvertTimeToLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ConvertTimeToLayer(aTime as Double, aLayer as AppleCALayer) As Double</SourceLine>
   <SourceLine>declare Function ConvertTimeToLayer lib QuartzCore selector "convertTime:toLayer:" (id as ptr, aTime as double, aLayer as ptr) as Double</SourceLine>
   <SourceLine>return ConvertTimeToLayer (id, atime, if (alayer = nil, NIL, alayer.id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>aTime as Double, aLayer as AppleCALayer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>InsertSubLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertSubLayer(ALayer as AppleCALayer, position as LayerOrderingMode)</SourceLine>
   <SourceLine>declare sub insertSublayerBelow lib QuartzCore selector "insertSublayer:below" (id as ptr, aLayer as ptr)</SourceLine>
   <SourceLine>declare sub insertSublayerAbove lib QuartzCore selector "insertSublayer:above" (id as ptr, aLayer as ptr)</SourceLine>
   <SourceLine>declare sub replaceSublayer lib QuartzCore selector "replaceSublayer:with" (id as ptr, aLayer as ptr)</SourceLine>
   <SourceLine>select case position</SourceLine>
   <SourceLine>case LayerOrderingMode.Below</SourceLine>
   <SourceLine>insertSublayerBelow (id, ALAyer.id)</SourceLine>
   <SourceLine>case LayerOrderingMode.Above</SourceLine>
   <SourceLine>insertSublayerAbove (id, ALAyer.id)</SourceLine>
   <SourceLine>case LayerOrderingMode.Replace</SourceLine>
   <SourceLine>replaceSublayer id, ALayer.id</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ALayer as AppleCALayer, position as LayerOrderingMode</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertSubLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertSubLayer(ALayer as AppleCALayer, index as UInt32)</SourceLine>
   <SourceLine>declare sub insertSublayer lib QuartzCore selector "insertSublayer:atIndex:" (id as ptr, aLayer as ptr, Index as UInt32)</SourceLine>
   <SourceLine>insertSublayer id, ALayer.id, index</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ALayer as AppleCALayer, index as UInt32</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LayoutIfNeeded</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LayoutIfNeeded()</SourceLine>
   <SourceLine>// PerformLayoutIfNeeded</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LayoutSubLayers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LayoutSubLayers()</SourceLine>
   <SourceLine>declare sub layoutSublayers lib QuartzCore selector "layoutSublayers" (id as ptr)</SourceLine>
   <SourceLine>layoutSublayers id</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NeedsDisplayForKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Function NeedsDisplayForKey(aKey As CFStringRef) As Boolean</SourceLine>
   <SourceLine>Declare Function needsDisplayForKey lib QuartzCore selector "needsDisplayForKey:" (id as ptr, key as CFStringRef) as Boolean</SourceLine>
   <SourceLine>return needsDisplayForKey (ClassPtr, aKey)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>aKey As CFStringRef</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>PauseAnimation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub PauseAnimation()</SourceLine>
   <SourceLine>dim offset as double = ConvertTimeFromLayer (CACurrentMediaTime, NIL)</SourceLine>
   <SourceLine>Speed = 0</SourceLine>
   <SourceLine>TimeOffset = offset</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveAllAnimations</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveAllAnimations()</SourceLine>
   <SourceLine>declare Sub RemoveAllAnimations lib QuartzCore selector "removeAllAnimations" (id as ptr)</SourceLine>
   <SourceLine>RemoveAllAnimations id</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveAnimation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function RemoveAnimation(key as CFStringRef) As AppleCAAnimation</SourceLine>
   <SourceLine>declare Sub RemoveAnimationForKey lib QuartzCore selector "removeAnimationForKey:" (id as ptr, key as CFStringref)</SourceLine>
   <SourceLine>RemoveAnimationForKey id, key</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>key as CFStringRef</ItemParams>
  <ItemResult>AppleCAAnimation</ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveFromSuperlayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveFromSuperlayer()</SourceLine>
   <SourceLine>declare sub removeFromSuperlayer lib QuartzCore selector "removeFromSuperlayer" (id as ptr)</SourceLine>
   <SourceLine>removeFromSuperlayer id</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ResumeAnimation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ResumeAnimation()</SourceLine>
   <SourceLine>dim PausedTime as Double = TimeOffset</SourceLine>
   <SourceLine>Speed = 1</SourceLine>
   <SourceLine>TimeOffset = 0</SourceLine>
   <SourceLine>BeginTime = 0</SourceLine>
   <SourceLine>dim timesincepause as double =  ConvertTimeFromLayer (CACurrentMediaTime, nil) - PausedTime</SourceLine>
   <SourceLine>BeginTime = timesincepause</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>MakeFromPtr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Function MakeFromPtr(aPtr as Ptr) As AppleCALayer</SourceLine>
   <SourceLine>return if (aptr = nil, nil, new AppleCALayer(aptr))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>aPtr as Ptr</ItemParams>
  <ItemResult>AppleCALayer</ItemResult>
 </Method>
 <Property>
  <ItemName>AffineTransform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AffineTransform As CGAffineTransform</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AffineTransform As CGAffineTransform</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setAffineTransform lib QuartzCore selector "setAffineTransform:" (id as ptr, value as CGAffineTransform32Bit)</SourceLine>
   <SourceLine>setAffineTransform id, value.toCGAffineTransform32Bit</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setAffineTransform lib QuartzCore selector "setAffineTransform:" (id as ptr, value as CGAffineTransform)</SourceLine>
   <SourceLine>setAffineTransform id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function affineTransform lib QuartzCore selector "affineTransform" (id as ptr) as CGAffineTransform32Bit</SourceLine>
   <SourceLine>return affineTransform(id).toCGAffineTransform</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function affineTransform lib QuartzCore selector "affineTransform" (id as ptr) as CGAffineTransform</SourceLine>
   <SourceLine>return affineTransform (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>AnchorPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AnchorPoint As NSPoint</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AnchorPoint As NSPoint</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setAnchorPoint lib QuartzCore selector "setAnchorPoint:" (id as ptr, value as NSPoint32Bit)</SourceLine>
   <SourceLine>setAnchorPoint id, value.toNSPoint32</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setAnchorPoint lib QuartzCore selector "setAnchorPoint:" (id as ptr, value as NSPoint)</SourceLine>
   <SourceLine>setAnchorPoint id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function anchorPoint lib QuartzCore selector "anchorPoint" (id as ptr) as NSPoint32Bit</SourceLine>
   <SourceLine>return anchorPoint(id).toNSPoint</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function anchorPoint lib QuartzCore selector "anchorPoint" (id as ptr) as NSPoint</SourceLine>
   <SourceLine>return anchorPoint (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>AnchorPointZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AnchorPointZ As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AnchorPointZ As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setAnchorPointZ lib QuartzCore selector "setAnchorPointZ:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setAnchorPointZ lib QuartzCore selector "setAnchorPointZ:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setAnchorPointZ id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function anchorPointZ lib QuartzCore selector "anchorPointZ" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function anchorPointZ lib QuartzCore selector "anchorPointZ" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return anchorPointZ (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>AnimationKeys</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AnimationKeys As AppleArray</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AnimationKeys As AppleArray</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>declare function animationKeys lib QuartzCore selector "animationKeys" (id as Ptr) as ptr</SourceLine>
   <SourceLine>return AppleArray.MakeFromPtr (animationKeys (id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BackgroundColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BackgroundColor As AppleCGColor</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BackgroundColor As AppleCGColor</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>Declare sub setbackgroundcolor lib QuartzCore selector "setBackgroundColor:" (id as ptr, value as ptr)</SourceLine>
   <SourceLine>setbackgroundcolor id, value.CFTypeRef</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Declare function backgroundcolor lib QuartzCore selector "backgroundColor" (id as ptr) as ptr</SourceLine>
   <SourceLine>return new AppleCGColor (backgroundcolor(id))</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BorderColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BorderColor As AppleCGColor</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BorderColor As AppleCGColor</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setBorderColor lib QuartzCore selector "setBorderColor:" (id as ptr, value as ptr)</SourceLine>
   <SourceLine>setBorderColor id, value.CFTypeRef</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function borderColor lib QuartzCore selector "borderColor" (id as ptr) as ptr</SourceLine>
   <SourceLine>return new AppleCGColor (borderColor (id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>BorderWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BorderWidth As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BorderWidth As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setBorderWidth lib QuartzCore selector "setBorderWidth:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setBorderWidth lib QuartzCore selector "setBorderWidth:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setBorderWidth id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function borderWidth lib QuartzCore selector "borderWidth" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function borderWidth lib QuartzCore selector "borderWidth" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return borderWidth (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Bounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Bounds As NSRect</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Bounds As NSRect</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>setBounds value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return getbounds</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ClassPtr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared ClassPtr As Ptr</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ClassPtr As Ptr</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>1</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>static mClassPtr as Ptr = NSClassFromString ("CALayer")</SourceLine>
   <SourceLine>return mClassPtr</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Contents</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Contents As AppleGeneralObject</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Contents As AppleGeneralObject</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>// setcontents (value.GeneralID)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// return AppleObject.MakeFromPtr (getContents)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ContentsCenter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ContentsCenter As NSRect</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ContentsCenter As NSRect</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setContentsCenter lib QuartzCore selector "setContentsCenter:" (id as ptr, value as NSRect32Bit)</SourceLine>
   <SourceLine>setContentsCenter id, value.toNSRect32</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setContentsCenter lib QuartzCore selector "setContentsCenter:" (id as ptr, value as nsrect)</SourceLine>
   <SourceLine>setContentsCenter id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>Declare Function contentsCenter lib QuartzCore selector "contentsCenter" (id as ptr) as NSRect32Bit</SourceLine>
   <SourceLine>return contentsCenter(id).toNSRect</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>Declare Function contentsCenter lib QuartzCore selector "contentsCenter" (id as ptr) as NSRect</SourceLine>
   <SourceLine>return contentsCenter (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ContentsFlipped</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ContentsFlipped As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ContentsFlipped As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function contentsAreFlipped lib QuartzCore selector "contentsAreFlipped" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return contentsAreFlipped (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ContentsGravity</ItemName>
  <Compatibility></Compatibility>
  <Attributes>hidden</Attributes>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ContentsGravity As CFStringRef</SourceLine>
   <SourceLine>This property is hidden to avoid wrong string values. Use contentPosition instead.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ContentsGravity As CFStringRef</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>declare sub setContentsGravity lib QuartzCore selector "setContentsGravity:" (id as ptr, value as cfstringref)</SourceLine>
   <SourceLine>setContentsGravity id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>declare function contentsGravity lib QuartzCore selector "contentsGravity" (id as ptr) as cfstringref</SourceLine>
   <SourceLine>return contentsGravity (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ContentsPositioning</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ContentsPositioning As caLayerContentPosition</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ContentsPositioning As caLayerContentPosition</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>dim ConstantValue as text</SourceLine>
   <SourceLine>Select case value</SourceLine>
   <SourceLine>case calayerContentPosition.Bottom</SourceLine>
   <SourceLine>ConstantValue = kCAGravityBottom</SourceLine>
   <SourceLine>case calayerContentPosition.BottomLeft</SourceLine>
   <SourceLine>ConstantValue =kCAGravityBottomLeft</SourceLine>
   <SourceLine>case calayerContentPosition.BottomRight</SourceLine>
   <SourceLine>ConstantValue = kCAGravityBottomRight</SourceLine>
   <SourceLine>case calayerContentPosition.Center</SourceLine>
   <SourceLine>ConstantValue = kCAGravityCenter</SourceLine>
   <SourceLine>case calayerContentPosition.Left</SourceLine>
   <SourceLine>ConstantValue = kCAGravityLeft</SourceLine>
   <SourceLine>case calayerContentPosition.Resize</SourceLine>
   <SourceLine>ConstantValue = kCAGravityResize</SourceLine>
   <SourceLine>case calayerContentPosition.ResizeProportionally</SourceLine>
   <SourceLine>ConstantValue =kCAGravityResizeAspect</SourceLine>
   <SourceLine>case calayerContentPosition.FillProportionally</SourceLine>
   <SourceLine>ConstantValue = kCAGravityResizeAspectFill</SourceLine>
   <SourceLine>case calayerContentPosition.Right</SourceLine>
   <SourceLine>ConstantValue =kCAGravityRight</SourceLine>
   <SourceLine>case calayerContentPosition.Top</SourceLine>
   <SourceLine>ConstantValue = kCAGravityTop</SourceLine>
   <SourceLine>case calayerContentPosition.TopLeft</SourceLine>
   <SourceLine>ConstantValue =kCAGravityTopLeft</SourceLine>
   <SourceLine>case calayerContentPosition.TopRight</SourceLine>
   <SourceLine>ConstantValue =kCAGravityTopRight</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>ContentsGravity =GravityDict.TextForKey(ConstantValue)</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>dim result as text = GravityDict.TextkeyForObject(new AppleCFString(ContentsGravity))</SourceLine>
   <SourceLine>if not result.Empty then</SourceLine>
   <SourceLine>select case result</SourceLine>
   <SourceLine>case kCAGravityBottom</SourceLine>
   <SourceLine>return calayerContentPosition.Bottom</SourceLine>
   <SourceLine>case kCAGravityBottomLeft</SourceLine>
   <SourceLine>return calayerContentPosition.BottomLeft</SourceLine>
   <SourceLine>case kCAGravityBottomRight</SourceLine>
   <SourceLine>return calayerContentPosition.BottomRight</SourceLine>
   <SourceLine>case kCAGravityCenter</SourceLine>
   <SourceLine>return calayerContentPosition.Center</SourceLine>
   <SourceLine>case kCAGravityLeft</SourceLine>
   <SourceLine>return calayerContentPosition.Left</SourceLine>
   <SourceLine>case kCAGravityResize</SourceLine>
   <SourceLine>return calayerContentPosition.Resize</SourceLine>
   <SourceLine>case kCAGravityResizeAspect</SourceLine>
   <SourceLine>return calayerContentPosition.ResizeProportionally</SourceLine>
   <SourceLine>case kCAGravityResizeAspectFill</SourceLine>
   <SourceLine>return calayerContentPosition.FillProportionally</SourceLine>
   <SourceLine>case kCAGravityRight</SourceLine>
   <SourceLine>return calayerContentPosition.Right</SourceLine>
   <SourceLine>case kCAGravityTop</SourceLine>
   <SourceLine>return calayerContentPosition.Top</SourceLine>
   <SourceLine>case kCAGravityTopLeft</SourceLine>
   <SourceLine>return calayerContentPosition.TopLeft</SourceLine>
   <SourceLine>case kCAGravityTopRight</SourceLine>
   <SourceLine>return calayerContentPosition.TopRight</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ContentsScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ContentsScale As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ContentsScale As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setContentsScale lib QuartzCore selector "setContentsScale:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setContentsScale lib QuartzCore selector "setContentsScale:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setContentsScale id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function contentsScale lib QuartzCore selector "contentsScale" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function contentsScale lib QuartzCore selector "contentsScale" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return contentsScale (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>CornerRadius</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CornerRadius As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CornerRadius As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setCornerRadius lib QuartzCore selector "setCornerRadius:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setCornerRadius lib QuartzCore selector "setCornerRadius:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setCornerRadius id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function cornerRadius lib QuartzCore selector "cornerRadius" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function cornerRadius lib QuartzCore selector "cornerRadius" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return cornerRadius (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DelegateAppleView</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DelegateAppleView As AppleView</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DelegateAppleView As AppleView</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>setDelegate value.id</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>dim myptr as ptr = getDelegate</SourceLine>
   <SourceLine>return if (myptr &lt;&gt; NIL, new AppleView (myptr), NIL)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DoubleSided</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DoubleSided As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DoubleSided As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub doubleSided lib QuartzCore selector "setDoubleSided:" (id as ptr, value as boolean)</SourceLine>
   <SourceLine>doubleSided id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function doubleSided lib QuartzCore selector "isDoubleSided" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return doubleSided (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DrawsAsynchronously</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DrawsAsynchronously As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DrawsAsynchronously As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setDrawsAsynchronously lib QuartzCore selector "setDrawsAsynchronously:" (id as ptr, value as boolean)</SourceLine>
   <SourceLine>setDrawsAsynchronously id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function drawsAsynchronously lib QuartzCore selector "drawsAsynchronously" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return drawsAsynchronously (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>EdgeAntialiasing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EdgeAntialiasing As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EdgeAntialiasing As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setAllowsEdgeAntialiasing lib QuartzCore selector "setAllowsEdgeAntialiasing:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setAllowsEdgeAntialiasing id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function allowsEdgeAntialiasing lib QuartzCore selector "allowsEdgeAntialiasing" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return allowsEdgeAntialiasing (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>EdgeAntialiasingMask</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EdgeAntialiasingMask As AppleCAEdgeAntialiasingMask</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EdgeAntialiasingMask As AppleCAEdgeAntialiasingMask</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>declare sub setEdgeAntialiasingMask lib QuartzCore selector "setEdgeAntialiasingMask:" (id as ptr, value as uint32)</SourceLine>
   <SourceLine>setEdgeAntialiasingMask id, value.ID</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>declare function edgeAntialiasingMask lib QuartzCore selector "edgeAntialiasingMask" (id as ptr) as UInt32</SourceLine>
   <SourceLine>return new AppleCAEdgeAntialiasingMask (edgeAntialiasingMask(id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Frame</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Frame As NSRect</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Frame As NSRect</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>setFrame value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return getFrame</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GeometryFlipped</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GeometryFlipped As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GeometryFlipped As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setGeometryFlipped lib QuartzCore selector "setGeometryFlipped:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setGeometryFlipped id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function geometryFlipped lib QuartzCore selector "isGeometryFlipped" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return geometryFlipped (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GravityDict</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared GravityDict As AppleDictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GravityDict As AppleDictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>static mGravLib as AppleMutableDictionary</SourceLine>
   <SourceLine>if mGravLib = nil then</SourceLine>
   <SourceLine>mGravLib = new AppleMutableDictionary (12)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityBottom) = SystemConstantName (kCAGravityBottom, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityBottomRight) = SystemConstantName (kCAGravityBottomRight, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityBottomLeft) = SystemConstantName (kCAGravityBottomLeft, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityCenter) = SystemConstantName (kCAGravityCenter, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityLeft) = SystemConstantName (kCAGravityLeft, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityResize) = SystemConstantName (kCAGravityResize, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityResizeAspect) = SystemConstantName (kCAGravityResizeAspect, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityResizeAspectFill) = SystemConstantName (kCAGravityResizeAspectFill, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityRight) = SystemConstantName (kCAGravityRight, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityTop) = SystemConstantName (kCAGravityTop, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityTopLeft) = SystemConstantName (kCAGravityTopLeft, QuartzCorePath)</SourceLine>
   <SourceLine>mGravLib.ValueForKey (kCAGravityTopRight) = SystemConstantName (kCAGravityTopRight, QuartzCorePath)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return mGravLib</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>GroupOpacity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>GroupOpacity As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>GroupOpacity As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setAllowsGroupOpacity lib QuartzCore selector "setAllowsGroupOpacity:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setAllowsGroupOpacity id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function allowsGroupOpacity lib QuartzCore selector "allowsGroupOpacity" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return allowsGroupOpacity (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Height</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Height As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Height As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>Bounds.Size_.Height = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return bounds.Size_.Height</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Hidden</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Hidden As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Hidden As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setHidden lib QuartzCore selector "setHidden:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setHidden id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function hidden lib QuartzCore selector "isHidden" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return hidden (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Left</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Left As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Left As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>position.x = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return Position.x</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Mask</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Mask As AppleCALayer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Mask As AppleCALayer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setMask lib QuartzCore selector "setMask:" (id as ptr, value as ptr)</SourceLine>
   <SourceLine>setMask id, value.Id</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function mask lib QuartzCore selector "mask" (id as ptr) as ptr</SourceLine>
   <SourceLine>dim myptr as ptr = mask (id)</SourceLine>
   <SourceLine>return if (myptr &lt;&gt; NIL, new AppleCALayer (myptr), NIL)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>MasksToBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MasksToBounds As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MasksToBounds As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setMasksToBounds lib QuartzCore selector "setMasksToBounds:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setMasksToBounds id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function masksToBounds lib QuartzCore selector "masksToBounds" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return masksToBounds (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ModelLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ModelLayer As AppleCALayer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ModelLayer As AppleCALayer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function modelLayer lib QuartzCore selector "modelLayer" (id as ptr) as ptr</SourceLine>
   <SourceLine>dim myptr as ptr = modelLayer (id)</SourceLine>
   <SourceLine>return if (myptr &lt;&gt; NIL, new AppleCALayer (myptr), NIL)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As CFStringRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As CFStringRef</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>setname value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return getname</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>NeedsDisplayOnBoundsChange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>NeedsDisplayOnBoundsChange As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>NeedsDisplayOnBoundsChange As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>Declare Sub setNeedsDisplayOnBoundsChange lib QuartzCore selector "setNeedsDisplayOnBoundsChange:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setneedsDisplayOnBoundsChange id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Declare function needsDisplayOnBoundsChange lib QuartzCore selector "needsDisplayOnBoundsChange" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return needsDisplayOnBoundsChange (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Opacity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Opacity As Single</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Opacity As Single</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setOpacity lib QuartzCore selector "setOpacity:" (id as ptr, value as single)</SourceLine>
   <SourceLine>setopacity id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function opacity lib QuartzCore selector "opacity" (id as ptr) as single</SourceLine>
   <SourceLine>return opacity (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Opaque</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Opaque As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Opaque As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>// setOpaque (value)</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// return getOpaque</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Position</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Position As NSPoint</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Position As NSPoint</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setPosition lib QuartzCore selector "setPosition:" (id as ptr, value as NSPoint32Bit)</SourceLine>
   <SourceLine>setPosition id, value.toNSPoint32</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setPosition lib QuartzCore selector "setPosition:" (id as ptr, value as NSPoint)</SourceLine>
   <SourceLine>setPosition id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function position lib QuartzCore selector "position" (id as ptr) as NSPoint32Bit</SourceLine>
   <SourceLine>return position(id).toNSPoint</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function position lib QuartzCore selector "position" (id as ptr) as NSPoint</SourceLine>
   <SourceLine>return position (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>PreferredFrameSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PreferredFrameSize As NSSize</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PreferredFrameSize As NSSize</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function preferredFrameSize lib QuartzCore selector "preferredFrameSize" (id as ptr) as NSSize32Bit</SourceLine>
   <SourceLine>return preferredFrameSize(id).toNSSize</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function preferredFrameSize lib QuartzCore selector "preferredFrameSize" (id as ptr) as NSSize</SourceLine>
   <SourceLine>return preferredFrameSize (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>PresentationLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PresentationLayer As AppleCALayer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PresentationLayer As AppleCALayer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function presentationLayer lib QuartzCore selector "presentationLayer" (id as ptr) as ptr</SourceLine>
   <SourceLine>return new AppleCALayer (presentationLayer (id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>RasterizationScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RasterizationScale As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RasterizationScale As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setRasterizationScale lib QuartzCore selector "setRasterizationScale:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setRasterizationScale lib QuartzCore selector "setRasterizationScale:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setRasterizationScale id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function rasterizationScale lib QuartzCore selector "rasterizationScale" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function rasterizationScale lib QuartzCore selector "rasterizationScale" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return rasterizationScale (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ShadowColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShadowColor As AppleCGColor</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShadowColor As AppleCGColor</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setShadowColor lib QuartzCore selector "setShadowColor:" (id as ptr, value as ptr)</SourceLine>
   <SourceLine>setShadowColor id, value.CFTypeRef</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function shadowColor lib QuartzCore selector "shadowColor" (id as ptr) as ptr</SourceLine>
   <SourceLine>return new AppleCGColor (shadowColor (id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ShadowOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShadowOffset As NSSize</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShadowOffset As NSSize</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setShadowOffset lib QuartzCore selector "setShadowOffset:" (id as ptr, value as NSSize32Bit)</SourceLine>
   <SourceLine>setShadowOffset id, value.toNSSize32</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setShadowOffset lib QuartzCore selector "setShadowOffset:" (id as ptr, value as NSSize)</SourceLine>
   <SourceLine>setShadowOffset id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function shadowOffset lib QuartzCore selector "shadowOffset" (id as ptr) as NSSize32Bit</SourceLine>
   <SourceLine>return shadowOffset(id).toNSSize</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function shadowOffset lib QuartzCore selector "shadowOffset" (id as ptr) as NSSize</SourceLine>
   <SourceLine>return shadowOffset (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ShadowOpacity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShadowOpacity As Single</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShadowOpacity As Single</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setShadowOpacity lib QuartzCore selector "setShadowOpacity:" (id as ptr, value as single)</SourceLine>
   <SourceLine>setShadowOpacity id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function shadowOpacity lib  QuartzCore selector "shadowOpacity" (id as ptr) as single</SourceLine>
   <SourceLine>return shadowOpacity (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ShadowPath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShadowPath As AppleCGPath</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShadowPath As AppleCGPath</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setShadowPath lib QuartzCore selector "setShadowPath:" (id as ptr, value as Ptr)</SourceLine>
   <SourceLine>setShadowPath id, value.CFTypeRef</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function shadowPath lib  QuartzCore selector "shadowPath" (id as ptr) as Ptr</SourceLine>
   <SourceLine>return new AppleCGPath (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ShadowRadius</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShadowRadius As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShadowRadius As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setShadowRadius lib QuartzCore selector "setShadowRadius:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setShadowRadius lib QuartzCore selector "setShadowRadius:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setShadowRadius id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function shadowRadius lib QuartzCore selector "shadowRadius" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function shadowRadius lib QuartzCore selector "shadowRadius" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return shadowRadius (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ShouldRasterize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShouldRasterize As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShouldRasterize As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setShouldRasterize lib QuartzCore selector "setShouldRasterize:" (id as ptr, value as Boolean)</SourceLine>
   <SourceLine>setShouldRasterize id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function shouldRasterize lib QuartzCore selector "shouldRasterize" (id as ptr) as Boolean</SourceLine>
   <SourceLine>return shouldRasterize (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SubLayers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SubLayers As AppleArray</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SubLayers As AppleArray</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>DEclare Sub setSubLayers lib QuartzCore selector "setSublayers:" (id as ptr, value as ptr)</SourceLine>
   <SourceLine>setSubLayers id, value.Id</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function sublayers lib QuartzCore selector "sublayers" (id as ptr) as ptr</SourceLine>
   <SourceLine>return  AppleArray.MakeFromPtr (sublayers (id))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SublayerTransform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SublayerTransform As CATransform3D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SublayerTransform As CATransform3D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setSublayerTransform lib QuartzCore selector "setSublayerTransform:" (id as ptr, value as CATransform3D32Bit)</SourceLine>
   <SourceLine>setSublayerTransform id, value.toCATransform3D32Bit</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setSublayerTransform lib QuartzCore selector "setSublayerTransform:" (id as ptr, value as CATransform3D)</SourceLine>
   <SourceLine>setSublayerTransform id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function sublayerTransform lib QuartzCore selector "sublayerTransform" (id as ptr) as CATransform3D32Bit</SourceLine>
   <SourceLine>return sublayerTransform(id).toCATransform3D</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function sublayerTransform lib QuartzCore selector "sublayerTransform" (id as ptr) as CATransform3D</SourceLine>
   <SourceLine>return sublayerTransform (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SuperLayer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SuperLayer As AppleCALayer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SuperLayer As AppleCALayer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>DEclare Function superlayer lib QuartzCore selector "superlayer" (id as ptr) as ptr</SourceLine>
   <SourceLine>dim myptr as ptr = superlayer (id)</SourceLine>
   <SourceLine>return if (myptr &lt;&gt; NIL, new AppleCALayer (myptr), NIL)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Top</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Top As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Top As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>position.y = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return Position.y</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Transform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Transform As CATransform3D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Transform As CATransform3D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setTransform lib QuartzCore selector "setTransform:" (id as ptr, value as CATransform3D32Bit)</SourceLine>
   <SourceLine>setTransform id, value.toCATransform3D32Bit</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setTransform lib QuartzCore selector "setTransform:" (id as ptr, value as CATransform3D)</SourceLine>
   <SourceLine>setTransform id, value</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function transform lib QuartzCore selector "transform" (id as ptr) as CATransform3D32Bit</SourceLine>
   <SourceLine>return transform(id).toCATransform3D</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function transform lib QuartzCore selector "transform" (id as ptr) as CATransform3D</SourceLine>
   <SourceLine>return transform (id)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Width</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Width As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Width As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>Bounds.Size_.Width = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return bounds.Size_.Width</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ZPosition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ZPosition As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ZPosition As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Sub setZPosition lib QuartzCore selector "setZPosition:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Sub setZPosition lib QuartzCore selector "setZPosition:" (id as ptr, value as Double)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setZPosition id, value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if target32bit</SourceLine>
   <SourceLine>DEclare Function zPosition lib QuartzCore selector "zPosition" (id as ptr) as single</SourceLine>
   <SourceLine>#elseif Target64Bit</SourceLine>
   <SourceLine>DEclare Function zPosition lib QuartzCore selector "zPosition" (id as ptr) as Double</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return zPosition (id)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Hash</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>UInteger</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsFirstResponder</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RetainCount</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>UInteger</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextInputContextIdentifier</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Text</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Description</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Text</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>isProxy</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DebugDescription</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Text</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasOwnership</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsNIL</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>mHasOwnership</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Autoreverses</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BeginTime</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Duration</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FillMode</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>FillModes</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Remove</ItemDef>
    <ItemDef>1 - Remain</ItemDef>
    <ItemDef>2 - Reset</ItemDef>
    <ItemDef>3 - Both</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MagnificationFilter</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>ScalingFilters</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Linear</ItemDef>
    <ItemDef>1 - Nearest</ItemDef>
    <ItemDef>2 - Trilinear</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinificationFilter</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>ScalingFilters</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Linear</ItemDef>
    <ItemDef>1 - Nearest</ItemDef>
    <ItemDef>2 - Trilinear</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinificationFilterBias</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Single</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RepeatCount</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Single</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RepeatDuration</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Speed</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Single</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TimeOffset</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AnchorPointZ</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>BorderWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ContentsFlipped</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ContentsPositioning</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>caLayerContentPosition</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Center</ItemDef>
    <ItemDef>1 - Top</ItemDef>
    <ItemDef>2 - Bottom</ItemDef>
    <ItemDef>3 - Left</ItemDef>
    <ItemDef>4 - Right</ItemDef>
    <ItemDef>5 - TopLeft</ItemDef>
    <ItemDef>6 - TopRight</ItemDef>
    <ItemDef>7 - BottomLeft</ItemDef>
    <ItemDef>8 - BottomRight</ItemDef>
    <ItemDef>9 - Resize</ItemDef>
    <ItemDef>10 - ResizeProportionally</ItemDef>
    <ItemDef>11 - FillProportionally</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ContentsScale</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CornerRadius</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DoubleSided</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DrawsAsynchronously</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EdgeAntialiasing</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GeometryFlipped</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>GroupOpacity</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Hidden</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MasksToBounds</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>NeedsDisplayOnBoundsChange</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Opacity</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Single</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Opaque</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RasterizationScale</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ShadowOpacity</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Single</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ShadowRadius</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ShouldRasterize</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ZPosition</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>kCAGravityBottom</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityBottom</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityBottomLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityBottomLeft</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityBottomRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityBottomRight</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityCenter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityCenter</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityLeft</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityResize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityResize</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityResizeAspect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityResizeAspect</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityResizeAspectFill</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityResizeAspectFill</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityRight</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityTop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityTop</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityTopLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityTopLeft</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCAGravityTopRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>6</ItemType>
  <ItemDef>kCAGravityTopRight</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>CaLayerContentPosition</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>CaLayerContentPosition</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Center</SourceLine>
   <SourceLine>Top</SourceLine>
   <SourceLine>Bottom</SourceLine>
   <SourceLine>Left</SourceLine>
   <SourceLine>Right</SourceLine>
   <SourceLine>TopLeft</SourceLine>
   <SourceLine>TopRight</SourceLine>
   <SourceLine>BottomLeft</SourceLine>
   <SourceLine>BottomRight</SourceLine>
   <SourceLine>Resize</SourceLine>
   <SourceLine>ResizeProportionally</SourceLine>
   <SourceLine>FillProportionally</SourceLine>
  </ItemSource>
 </Enumeration>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>LayerOrderingMode</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>LayerOrderingMode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Above = 1</SourceLine>
   <SourceLine>Below = -1</SourceLine>
   <SourceLine>Replace = 0</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
</RBProject>
