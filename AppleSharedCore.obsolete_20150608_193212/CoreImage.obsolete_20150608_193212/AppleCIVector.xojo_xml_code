<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2015r3" FormatVersion="2" MinIDEVersion="20140300">
<block type="Module" ID="1378293759">
 <ObjName>AppleCIVector</ObjName>
 <ObjContainerID>359770111</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>AppleObject</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4129</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(X as Double)</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function vectorWithX lib CoreImage selector "vectorWithX:" (id as ptr, value as double) as ptr</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare function vectorWithX lib CoreImage selector "vectorWithX:" (id as ptr, value as single) as ptr</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor() -- From AppleObject</SourceLine>
   <SourceLine>// Constructor(AnId as Ptr) -- From AppleObject</SourceLine>
   <SourceLine>Super.Constructor (VectorWithX (ClassPtr, X))</SourceLine>
   <SourceLine>RetainClassObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>X as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(X as Double, Y As Double)</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function vectorWithXY lib CoreImage selector "vectorWithX:Y:" (id as ptr, x as double, y as double) as ptr</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare function vectorWithXY lib CoreImage selector "vectorWithX:Y:" (id as ptr, x as single, y as single) as ptr</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor() -- From AppleObject</SourceLine>
   <SourceLine>// Constructor(AnId as Ptr) -- From AppleObject</SourceLine>
   <SourceLine>Super.Constructor (VectorWithXY (ClassPtr, X, Y))</SourceLine>
   <SourceLine>RetainClassObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>X as Double, Y As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(X as Double, Y As Double, Z As Double)</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function vectorWithXYZ lib CoreImage selector "vectorWithX:Y:Z:" (id as ptr, x as double, y as double, z as double) as ptr</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare function vectorWithXYZ lib CoreImage selector "vectorWithX:YZ::" (id as ptr, x as single, y as single, z as single) as ptr</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor() -- From AppleObject</SourceLine>
   <SourceLine>// Constructor(AnId as Ptr) -- From AppleObject</SourceLine>
   <SourceLine>Super.Constructor (VectorWithXYZ (ClassPtr, X, Y, Z))</SourceLine>
   <SourceLine>RetainClassObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>X as Double, Y As Double, Z As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(X as Double, Y As Double, Z As Double, W As Double)</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function vectorWithXYZW lib CoreImage selector "vectorWithX:Y:Z:W:" (id as ptr, x as double, y as double, z as double, W As Double) as ptr</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>declare function vectorWithXYZW lib CoreImage selector "vectorWithX:Y:Z:W:" (id as ptr, x as single, y as single, z as single, W as single) as ptr</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>// Note that this may need modifications if there are multiple constructor choices.</SourceLine>
   <SourceLine>// Possible constructor calls:</SourceLine>
   <SourceLine>// Constructor() -- From AppleObject</SourceLine>
   <SourceLine>// Constructor(AnId as Ptr) -- From AppleObject</SourceLine>
   <SourceLine>Super.Constructor (VectorWithXYZW (ClassPtr, X, Y, Z, W))</SourceLine>
   <SourceLine>RetainClassObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>X as Double, Y As Double, Z As Double, W As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>MakefromPtr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine> Shared Function MakefromPtr(aPtr as Ptr) As AppleCIVector</SourceLine>
   <SourceLine>return if (aptr = nil, Nil, new AppleCIVector (aptr))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>aPtr as Ptr</ItemParams>
  <ItemResult>AppleCIVector</ItemResult>
 </Method>
 <Method>
  <ItemName>toNSPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toNSPoint() As NSPoint</SourceLine>
   <SourceLine>if count &gt;=2 then return NSPoint (x, y)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>NSPoint</ItemResult>
 </Method>
 <Method>
  <ItemName>toNSRect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toNSRect() As NSRect</SourceLine>
   <SourceLine>if count &gt;=4 then return NSRect (x, y, z, w)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>NSRect</ItemResult>
 </Method>
 <Property>
  <ItemName>ClassPtr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared ClassPtr As Ptr</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ClassPtr As Ptr</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>1</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>static mClassPtr as Ptr = NSClassFromString ("CIVector")</SourceLine>
   <SourceLine>return mClassPtr</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Count</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Count As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Count As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return getCount</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>StringRepresentation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>StringRepresentation As Text</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>StringRepresentation As Text</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Declare function stringRepresentation lib CoreImage selector "stringRepresentation" (id as ptr) as CFStringRef</SourceLine>
   <SourceLine>return stringRepresentation (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>W</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>W As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>W As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare sub setW lib CoreImage selector "setW:" (id as ptr, value as double)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare Sub setW lib CoreImage selector "setW:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setW id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function W lib CoreImage selector "W" (id as ptr) as double</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare function W lib CoreImage selector "W" (id as ptr) as single</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return W (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>X</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>X As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>X As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare sub setX lib CoreImage selector "setX:" (id as ptr, value as double)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare Sub setX lib CoreImage selector "setX:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setX id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function X lib CoreImage selector "X" (id as ptr) as double</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare function X lib CoreImage selector "X" (id as ptr) as single</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return X (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Y</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Y As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Y As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare sub setY lib CoreImage selector "setY:" (id as ptr, value as double)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare Sub setY lib CoreImage selector "setY:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setY id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function Y lib CoreImage selector "Y" (id as ptr) as double</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare function Y lib CoreImage selector "Y" (id as ptr) as single</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return Y (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Z</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Z As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Z As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare sub setZ lib CoreImage selector "setZ:" (id as ptr, value as double)</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare Sub setZ lib CoreImage selector "setZ:" (id as ptr, value as single)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>setZ id, value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#if Target64Bit</SourceLine>
   <SourceLine>declare function Z lib CoreImage selector "Z" (id as ptr) as double</SourceLine>
   <SourceLine>#elseif Target32Bit</SourceLine>
   <SourceLine>Declare function Z lib CoreImage selector "Z" (id as ptr) as single</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return Z (id)</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>DebugDescription</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Text</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasOwnership</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsNIL</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>mHasOwnership</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Description</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Text</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>isProxy</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Count</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>StringRepresentation</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Text</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>W</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>X</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Y</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Z</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
