#tag Class
Protected Class AppleURLSessionDelegate
Inherits AppleObject
	#tag Method, Flags = &h0
		Sub CancelAuthenticationChallenge(challenge as AppleURLAuthenticationChallenge)
		  Declare sub cancelAuthenticationChallenge lib Foundation selector "cancelAuthenticationChallenge:" (id as ptr, challenge as ptr)
		  cancelAuthenticationChallenge id , challenge.id
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ContinueWithoutCredentialForAuthenticationChallenge(challenge as AppleURLAuthenticationChallenge)
		  Declare sub continueWithoutCredentialForAuthenticationChallenge lib Foundation selector "continueWithoutCredentialForAuthenticationChallenge:" (id as ptr, challenge as ptr)
		  continueWithoutCredentialForAuthenticationChallenge id , challenge.id
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_URLSessiondidBecomeInvalidWithError(pid as ptr, sel as ptr, session as Ptr, error as ptr)
		  dim ego as new AppleURLSession (session)
		  ego.informonURLSessiondidBecomeInvalidWithError  (error)
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_URLSessionDidFinishEventsForBackgroundURLSession(pid as ptr, sel as ptr, session as Ptr)
		  dim ego as new AppleURLSession (session)
		  ego.informonURLSessionDidFinishEventsForBackgroundURLSession
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_URLSessiondidReceiveChallengecompletionHandler(pid as ptr, sel as ptr, session as Ptr, Challenge as ptr, handler as ptr)
		   dim ego as new AppleURLSession (session)
		  ego.informOnURLSessiondidReceiveChallengecompletionHandler  (challenge)
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_URLSessiontaskdidCompleteWithError(pid as ptr, sel as ptr, session as Ptr, task as ptr, error as ptr)
		  dim ego as new AppleURLSession (session)
		  ego.URLSessiontaskdidCompleteWithError  (task, error)
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		 Shared Function MakefromPtr(aPtr as Ptr) As AppleURLSessionDelegate
		  return if (aptr = nil, nil, new AppleURLSessionDelegate(aptr))
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub PerformDefaultHandlingForAuthenticationChallenge(challenge as AppleURLAuthenticationChallenge)
		  Declare sub performDefaultHandlingForAuthenticationChallenge lib Foundation selector "performDefaultHandlingForAuthenticationChallenge:" (id as ptr, challenge as ptr)
		  performDefaultHandlingForAuthenticationChallenge id , challenge.id
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub RejectProtectionSpaceAndContinueWithChallenge(challenge as AppleURLAuthenticationChallenge)
		  Declare sub rejectProtectionSpaceAndContinueWithChallenge lib Foundation selector "rejectProtectionSpaceAndContinueWithChallenge:" (id as ptr, challenge as ptr)
		  rejectProtectionSpaceAndContinueWithChallenge id , challenge.id
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub UseCredential(Credential as appleurlcredential, challenge as AppleURLAuthenticationChallenge)
		  Declare sub useCredential lib Foundation selector "useCredential:forAuthenticationChallenge:" (id as ptr, credential as ptr, challenge as ptr)
		  useCredential id , Credential.id, challenge.id
		End Sub
	#tag EndMethod


	#tag ComputedProperty, Flags = &h1
		#tag Getter
			Get
			  static targetID as ptr
			  if targetID = Nil then
			    // if Observers = nil then Observers = new Dictionary
			    dim methods() as TargetClassMethodHelper
			    //override URLSessionDelegate methods
			    methods.Append new TargetClassMethodHelper("URLSession:didBecomeInvalidWithError:", AddressOf impl_URLSessiondidBecomeInvalidWithError, "v@:@@")
			    methods.Append new TargetClassMethodHelper("URLSession:didReceiveChallenge:completionHandler:", AddressOf impl_URLSessiondidReceiveChallengecompletionHandler, "v@:@@@")
			    methods.Append new TargetClassMethodHelper("URLSessionDidFinishEventsForBackgroundURLSession:", AddressOf impl_URLSessionDidFinishEventsForBackgroundURLSession, "v@:@")
			    
			    //override NSURLSessionTaskDelegate methods
			    methods.Append new TargetClassMethodHelper("URLSession:task:didCompleteWithError:", AddressOf impl_URLSessiontaskdidCompleteWithError, "v@:@@@")
			    
			    targetID = BuildTargetClass ("NSObject", "iOSLibURLSessionDelegate",methods)
			  end if
			  Return targetID
			End Get
		#tag EndGetter
		Protected Shared ClassPtr As Ptr
	#tag EndComputedProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="DebugDescription"
			Group="Behavior"
			Type="Text"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Description"
			Group="Behavior"
			Type="Text"
		#tag EndViewProperty
		#tag ViewProperty
			Name="HasOwnership"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="IsNIL"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="isProxy"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="mHasOwnership"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
