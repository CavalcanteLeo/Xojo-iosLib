<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2015r3" FormatVersion="2" MinIDEVersion="20140300">
<block type="Module" ID="259459071">
 <ObjName>ColorExtension</ObjName>
 <ObjContainerID>1412438015</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>toCommaList</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toCommaList(extends c() as Color) As Text</SourceLine>
   <SourceLine>if c.Ubound &gt; -1 then</SourceLine>
   <SourceLine>dim result as text = c(0).totext</SourceLine>
   <SourceLine>if c.Ubound &gt; 0 then</SourceLine>
   <SourceLine>for q as UInteger = 1 to c.Ubound</SourceLine>
   <SourceLine>result = result +", "+c(q).totext</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>extends c() as Color</ItemParams>
  <ItemResult>Text</ItemResult>
 </Method>
 <Method>
  <ItemName>toAppleColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toAppleColor(extends c as color) As AppleColor</SourceLine>
   <SourceLine>return AppleColor.FromColor (c)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>extends c as color</ItemParams>
  <ItemResult>AppleColor</ItemResult>
 </Method>
 <Method>
  <ItemName>toText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toText(extends c as Color) As Text</SourceLine>
   <SourceLine>Return "&amp;c"+c.Red.ToHex(2)+c.Green.ToHex(2)+c.Blue.ToHex(2)+c.Alpha.ToHex(2)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>extends c as Color</ItemParams>
  <ItemResult>Text</ItemResult>
 </Method>
 <Method>
  <ItemName>toAppleCGColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toAppleCGColor(extends c as color) As AppleCGColor</SourceLine>
   <SourceLine>return AppleCGColor.FromColor (c)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>extends c as color</ItemParams>
  <ItemResult>AppleCGColor</ItemResult>
 </Method>
 <Method>
  <ItemName>toAppleCGColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function toAppleCGColor(extends c() as color) As AppleArray</SourceLine>
   <SourceLine>dim myArray as new AppleMutableArray(c.Ubound+1)</SourceLine>
   <SourceLine>for q as uinteger = 0 to c.Ubound</SourceLine>
   <SourceLine>myArray.Addobject new AppleCGColor(c(q))</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>return myArray</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>extends c() as color</ItemParams>
  <ItemResult>AppleArray</ItemResult>
 </Method>
 <Method>
  <ItemName>RandomColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function RandomColor(minval as integer, maxval as integer) As Color</SourceLine>
   <SourceLine>return color.rgb (math.RandomInt(minval, maxval), math.RandomInt(minval, maxval), math.RandomInt(minval, maxval))</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>minval as integer, maxval as integer</ItemParams>
  <ItemResult>Color</ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
