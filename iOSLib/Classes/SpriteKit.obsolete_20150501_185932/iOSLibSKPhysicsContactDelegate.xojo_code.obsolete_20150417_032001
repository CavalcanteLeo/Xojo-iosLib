#tag Class
Protected Class iOSLibSKPhysicsContactDelegate
Inherits iOSLibObject
	#tag Method, Flags = &h1000
		Sub Constructor(parent as iOSLibSKScene)
		  // Calling the overridden superclass constructor.
		  // Note that this may need modifications if there are multiple constructor choices.
		  // Possible constructor calls:
		  // Constructor() -- From iOSLibObject
		  // Constructor(AnId as Ptr) -- From iOSLibObject
		  super.Constructor  (Init(Alloc(classptr)))
		  mhasownership = true
		  
		  if RetainDict = nil then RetainDict = new Dictionary
		  RetainDict.Value(id) = self
		  
		  if ParentDict = nil then ParentDict = new Dictionary
		  ParentDict.value (id) = WeakRef.Create (parent)
		  
		  system.debuglog "created new SKPhysicsContactDelegate: "+integer(id).totext
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Destructor()
		  if hasownership then
		    if RetainDict.HasKey(id) then
		      RetainDict.Remove (id)
		      ParentDict.remove (id)
		      system.DebugLog "Removed SKPhysicsContactDelegate from Dict"
		    end if
		  end if
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_DidBeginContact(pid as ptr, sel as ptr, contact as Ptr)
		  if ParentDict.Value (pid) <> NIL then
		    dim myRef as WeakRef = ParentDict.Value(pid)
		    dim myParent as  iOSLibSKScene = iOSLibSKScene (myref.Value )
		    myParent.informonDidBeginContact (Contact)
		  end if
		  
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_DidEndContact(pid as ptr, sel as ptr, contact as Ptr)
		  if ParentDict.Value (pid) <> NIL then
		    dim myRef as WeakRef = ParentDict.Value(pid)
		    dim myParent as  iOSLibSKScene = iOSLibSKScene (myref.Value )
		    myParent.informonDidEndContact (Contact)
		  end if
		  
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		 Shared Function MakeFromPtr(aPtr as Ptr) As iOSLibSKPhysicsContactDelegate
		  Return if (aptr = NIL, NIL, new iOSLibSKPhysicsContactDelegate (aptr))
		End Function
	#tag EndMethod


	#tag ComputedProperty, Flags = &h1
		#tag Getter
			Get
			  static targetID as ptr
			  if targetID = Nil then
			    dim methods() as TargetClassMethodHelper
			    //delegate methods
			    methods.Append new TargetClassMethodHelper("didBeginContact:", AddressOf impl_DidBeginContact, "v@:@")
			    methods.Append new TargetClassMethodHelper("didEndContact:", AddressOf impl_DidEndContact, "v@:@")
			    
			    targetID = BuildTargetClass ("NSObject", "iOSLibSKPhysicsContactDelegate",methods)
			  end if
			  Return targetID
			End Get
		#tag EndGetter
		Protected Shared ClassPtr As Ptr
	#tag EndComputedProperty

	#tag Property, Flags = &h21
		Private Shared ParentDict As Dictionary
	#tag EndProperty

	#tag Property, Flags = &h21
		Private Shared Retaindict As Dictionary
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="DebugDescription"
			Group="Behavior"
			Type="Text"
		#tag EndViewProperty
		#tag ViewProperty
			Name="HasOwnership"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="IsNIL"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="mHasOwnership"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
